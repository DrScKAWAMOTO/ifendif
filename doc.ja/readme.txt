`ifendif` は C/C++ 言語のソースコードが #if #endif ディレクティブによりどの部分が有効で
どの部分が無効となるかを報告してくれます。

`ifendif' はバックエンドとして cmdrecplay と clang cc1 を使います。
これらを使って、コンパイル時に指定されたマクロ定義を覚えておいて、`ifendif' 実行時にも
そのマクロ定義を再利用して #if #endif ディレクティブによって分割された領域のどの部分が
有効化を判断します。

`ifendif' が報告する結果に基づき emacs でグレイ表示するための elisp コード `if-endif.el'
も添付しました。

#if #endif ディレクティブは全部で 6 種類あります。

#if
#ifdef
#ifndef
#else
#elif
#endif

`ifendif' はプリプロセッサ clang cc1 を使って有効無効の判断を行うため、このような他の
ツール類が手動で有効無効を指定するのに比べて正確になります。丁度 Visual Studio の同様の
機能と同等となります。

`ifendif' の出力フォーマットについて言及しておきます。
出力される情報は

タイプ ',' 行番号 ',' タイプ ',' ... ',' 行番号 ',' タイプ

の形式です。

タイプとは、

1) 先頭行から最初の ifディレクティブ直前まで
2) n 番目の ifディレクティブの直後から n+1 番目の ifディレクティブの直前まで
3) 最後の ifディレクティブ直後から最終行まで

が「有効」か「無効」かを表したもので、

タイプ = 'V' ..... ifディレクティブの条件判断で有効な領域
タイプ = 'H' ..... ifディレクティブの条件判断で無効化された領域

です。

見た目80桁程度に収まるように適当なところで ',' の直後に改行が入る場合があります。
オプションで -v が指定された場合は更に if ディレクティブの種類も表示します。
詳しくは ifendif -h でヘルプを見てください。
また、オプションで -e が指定された場合は、`if-endif.el' と連携するための S 式を出力し
ます。
