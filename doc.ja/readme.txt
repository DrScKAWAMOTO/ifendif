`ifendif' は C/C++ 言語のソースコードが `#if #endif ディレクティブ' によりどの部分が
有効でどの部分が無効となるかを報告してくれます。

`ifendif' はバックエンドとして cmdrecplay と clang のプリプロセッサを使います。
これらを使って、コンパイル時に指定されたマクロ定義(-D,-I,-W,-f,-std など)を覚えておいて、
`ifendif' 実行時にもそのマクロ定義を再利用して `#if #endif ディレクティブ' によって分割
された領域のどの部分が有効かを判断します。

従って、
メイクファイルがどんなに膨大でも、
マクロがどんなに複雑でも、
ヘッダファイルの `#define #undef' 記述がどんなに入り乱れていても、
また`#if #endif ディレクティブ' がどんなに入れ子になっていても、
`ifendif' は Visual Studio と同じように行の有効性を正しく判断できます。

`ifendif' が報告する結果に基づき emacs でグレイ表示するための elisp コード `if-endif.el'
も添付しました。

`#if #endif ディレクティブ' は全部で 6 種類あります。

#if
#ifdef
#ifndef
#else
#elif
#endif

`ifendif' はこれらの全てに対応しています。

`ifendif' は clang のプリプロセッサを使って有効無効の判断を行うため、他のツール類が手動
で有効無効を指定するのに比べて正確です。

`ifendif' の出力フォーマットについて言及しておきます。
出力される情報は

タイプ ',' 行番号 ',' タイプ ',' ... ',' 行番号 ',' タイプ

の形式です。

行番号は `#if #endif ディレクティブ' が存在する行番号です。

タイプとは、

1) 先頭行から最初の `#if #endif ディレクティブ' 直前まで
2) n 番目の `#if #endif ディレクティブ' の直後から n+1 番目の直前まで
3) 最後の `#if #endif ディレクティブ' 直後から最終行まで

が「有効」か「無効」かを表したもので、

タイプ = 'V' ..... `#if #endif ディレクティブ' の条件判断で有効な領域
タイプ = 'H' ..... `#if #endif ディレクティブ' の条件判断で無効化された領域

です。

見た目80桁程度に収まるように適当なところで ',' の直後に改行が入る場合があります。
オプションで `-v' が指定された場合は更に `#if #endif ディレクティブ' の種類も表示します。
詳しくは `ifendif -h' でヘルプを見てください。
また、オプションで `-e' が指定された場合は、`if-endif.el' と連携するための S 式を出力し
ます。
